NewProject>> select Empty >> check mVC >> 
Controllers >> Rigth click>> Add COntroller>> give name --HomeController.cs in Controllers folder
-------------------------------------------------------------------------------------------------------
Run>> error>> as no view for Index()action method in Views Folder. Index.csHtml has to be there in Views Folder
 MVC Framework will look for a file with the name Index.aspx or Index.ascx within the Hom and Shared folder of the application.
 If the requested view file is found in any of the above locations, then the View generates the necessary HTML and sends the generated HTML back to the client who initially made the request.
views has to be there in Views folder with the names of Action methods of controllers classes.
HomeController.cs has Index() action method -- hence Index.cshtml file should be there in Views Folder inside a folder 
with Controller class file name -- Index.cshtml in Hom folder in Views folder -- here no Index.cshtml

In Views folder >> Home  Folder is going to contain all the view files(acion methods) (i.e. cshtml files) which are specific to HomeController. 
-------------------------------------------------------------------------------------------------------

for timebeing, in HomeController.cs classfile changed the return type ActionResult to String and returend a Stirng "Hello MVC 5 Application".. Run

Now change the URL to http://localhost:xxxx/Home/Index

In the URL “Home” is the name of the controller and “Index” is the name of the action method within the HomeController class.

the mapping is defined within the RegisterRoutes() method of the RouteConfig class which is in App_Start
In RegisterRoutes() method of RouteConfig.cs class id is optional so http://localhost:xxxx/Home/Index 
OR http://localhost:xxxx/Home/Index/10 will work.

http://localhost:xxxx/Home/Index
http://localhost:xxxx/Home
http://localhost:xxxx
----------------------------------------------------------------------

change Index() method in the HomeController.cs  >>id in url>> Index(int)
 public string Index(int id)
        {
            return "The value of  Id = " + id;
        }

        Now only this will work >> url with any idvalue >> http://localhost:xxxx/Home/Index/10  >>> The value of Id = 0 --- else error as Index() method is expecting a int value.
        
--------------------------------------------- ----------------------------------------------
change Index() method in the HomeController.cs  >> id and name in url>> Index(int) 

        public string Index(string id, string name)
        {
            return "The value of  Id = " + id + " and Name = " + name;
        }

        url>>http://localhost:xxxx/Home/Index/1001?name=ais  >>> The value of Id = 110 and Name = ais   OR http://localhost:xxxx

--------------------------------------------------------------------------------------------

use the “Request.QueryString” to retrieve the query string parameter 
>>Index() method in the HomeController.cs 
public string Index(string id, string name)
        {
            return "Id = " + id + " ,Name = " + Request.QueryString["name"];
        }

        url>>http://localhost:xxxx/Home/Index/1001?name=ais  >>> Id = 10 ,Name = ais

----------------------------------------------------------------------------------------------------

Addin Views in Views Folder 
--------------------------
Rightclick the action method in COntroller cs classfile>> Add View
Index.cshtml is created in Views/Hom/Index.cshtml
<h1> added in Index.cshtml
https://localhost:xxxxx/  >> Index View Coming From Views/Home - Hom Folder

------------------------------------------------------------------------------------------------------------

Adding Models -- Models folder
-----------------------------
Right click Models > New Item > Visual C#> Class> Employee.cs
Add property in this class -- press tab twice

in order to manage the employee data i.e. to perform the CRUD operation on the employee add another model class--EmployeeBusinessLayer.cs

Employee.cs  -- to store employee data
EmployeeBusinessLayer.cs >> GetEmployeeDetails() -- to work on the employee data >>> 2 classes in Models folder

Now modify the HomeController class as shown below to use the Employee and EmployeeBusinessLayer model to retrieve the employee data.
Add >> using FirstMVCDemo.Models; in HomController.cs
public ActionResult Index(int id)
        {
            EmployeeBusinessLayer employeeBL = new EmployeeBusinessLayer();
            Employee employee = employeeBL.GetEmployeeDetails(id);
            return View();
        }
------------------------------------------------------------------------------------------
But as the router is set by default to Index.cshtml ony that will display in the browser. 
url >> https://localhost:xxxxx/Hom/Index/1001  >>>  Index View Coming From Views/Home - Hom Folder
public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute(
                name: "Default",
                url: "{controller}/{action}/{id}",
                defaults: new { controller = "Hom", action = "Index", id = UrlParameter.Optional }
            );

-----------------------------------------------------------------------------------
ways to transfer the data from a Controller action method to a View

to display the EMployee data set in EmployeeBusinessLayer.cs -- need to pass the model data from the controller to a view. 
here data in EmployeeBusinessLayer.cs file in Models folder has to be passed to a view.

there are many ways to pass the model data from a controller to a view.>>>> 
ViewData, 
ViewBag, 
ViewModel, 
TempData, 
Storngly typed Data

----------------------------------------------------------------------------------------------------
ViewData - display Model data to Views
-----------------------------------------
In Controller/HomCOntroller.cs/ Index() in HomController.cs
        ViewData["Employee"] = employee;
        ViewData["Header"] = "Employee Details";
        
In Views/Hom/ Index.cshtml >>>>>>  it is mandatory to typecast explicitly to the actual type if you are accessing data other than the string type.
         @{
        var employee = ViewData["Employee"]  //typecasting
            as FirstMVCDemo.Models.Employee;
    }
    <h2>@ViewData["Header"]</h2>
    ...............................
      <tr>
                <td>Employee ID:</td>
                <td>@employee.EmployeeId </td>
            </tr>


            https://localhost:xxxxxxx/  >>>> 
Employee Details
Employee ID:	102
Name:	Ais
Gender:	Female
City:	Bangalore
Salary:	1000
Address:	KA

-----------------------------------------------------------------------------------
ViewBag - display Model data to Views
------------------------------------
 ViewBag is a dynamic property (a new feature introduced in C# 4.0). Dynamic data type means at runtime based on the value,
 it will decide the data type. 
 
 In Controller/HomCOntroller.cs/ Index() in HomController.cs
        ViewBag.Employee = employee;
        ViewBag.Header = "Employee Details";
        
In Views/Hom/ Index.cshtml >>>>>>  it is mandatory to typecast explicitly to the actual type if you are accessing data other than the string type.
   @{
        var employee = ViewBag.Employee;
    }
    <h2>@ViewBag.Header</h2>
    <table style="font-family:Arial">
        <tr>
            <td>Employee ID:</td>
            <td>@employee.EmployeeId </td>
        </tr>


        https://localhost:xxxxx/Hom/Index  >>> 
Employee Details
Employee ID:	101    // 101 -- Employee employee = employeeBL.GetEmployeeDetails(101);
Name:	Aish
Gender:	Female
City:	Bengaluru
Salary:	1000
Address:	KA
---------------------------------------------------------------------------------------------------------------------------------
Creating Strongly Typed View using ViewBag
---------------------------
In order to create a strongly typed view in ASP.NET MVC application, we need to pass the model object as a parameter to the View() extension method.

to specify the model type within the view by using the @model directive.

@model FirstMVCDemo.Models.Employee in Index.cshtml

The above statement will tell that we are going to use FirstMVCDemo.Models.Employee as the model for this view. 
Here in the directive (@model), the letter m is in lowercase and the statement should not be terminated with the semicolon.

Then we can access the model properties simply by using @Model, here the letter M is in uppercase.
So, in our example, we can access the Employee object properties such as Name, Gender, City, Salary, etc. 
by using @Model.Name, @Model.Gender, @Model.City, and @Model.Salary respectively.

 In Controller/HomCOntroller.cs/ Index() in HomController.cs
         ViewBag.Header = "Employee Details";

In Views/Hom/ Index.cshtml >>>>>> 
        @model FirstMVCDemo.Models.Employee
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="viewport" content="width=device-width" />
            <title>Page Title</title>
        </head>
        <body>
            <h2>@ViewBag.Header</h2>
            <table style="font-family:Arial">
                <tr>
                    <td>Employee ID:</td>
                    <td>@Model.EmployeeId </td>

 https://localhost:xxxxxx/Hom/Index


 ---------------------------------------------------------------------------------------------------------------------------

















